# Generated by Django 4.0 on 2022-05-17 10:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('typ', models.TextField()),
                ('active', models.BooleanField()),
                ('required', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.TextField(default='answer')),
                ('points', models.PositiveIntegerField(default=0)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('continue_text', models.TextField()),
                ('points', models.PositiveIntegerField()),
                ('index', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ManagementGoal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('budget', models.FloatField()),
                ('duration', models.PositiveIntegerField()),
                ('easy_tasks', models.PositiveIntegerField()),
                ('medium_tasks', models.PositiveIntegerField()),
                ('hard_tasks', models.PositiveIntegerField()),
                ('tasks_predecessor_p', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xp', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('motivation', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('stress', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('stress_error_optimum', models.FloatField(default=0.2)),
                ('stress_weekend_reduction', models.FloatField(default=-0.15)),
                ('stress_overtime_increase', models.FloatField(default=0.05)),
                ('stress_error_increase', models.FloatField(default=0.02)),
                ('task_completion_coefficient', models.FloatField(default=1.0)),
                ('error_completion_coefficient', models.FloatField(default=1.5)),
                ('done_tasks_per_meeting', models.IntegerField(default=50)),
                ('done_tasks_familiarity_factor', models.FloatField(default=10)),
                ('train_skill_increase_rate', models.FloatField(default=0.1)),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counter', models.IntegerField(default=0)),
                ('cost', models.FloatField(default=0)),
                ('day', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ScoreCard',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('easy', models.PositiveIntegerField()),
                ('medium', models.PositiveIntegerField()),
                ('hard', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('continue_text', models.TextField()),
                ('points', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SkillType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('salary', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('error_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('throughput', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.PositiveIntegerField()),
                ('done', models.BooleanField(default=False)),
                ('bug', models.BooleanField(default=False)),
                ('correct_specification', models.BooleanField(default=True)),
                ('unit_tested', models.BooleanField(default=False)),
                ('integration_tested', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='team', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='TemplateScenario',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(default='default_scenario_name')),
            ],
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('header', models.TextField()),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UserScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(blank=True, max_length=8, null=True)),
                ('config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.scenarioconfig')),
                ('state', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.scenariostate')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.team')),
                ('template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.templatescenario')),
            ],
        ),
    ]
