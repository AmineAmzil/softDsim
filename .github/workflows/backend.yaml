name: Deploy Backend DEV

on:
  push:
    branches:
    - develop
    # - main
    paths:
    - 'backend/**'
    - '.github/workflows/backend.yaml'
    - 'deploy/**'
  workflow_dispatch:

jobs:

  consecutiveness:
    name: Check running Jobs
    runs-on: ubuntu-latest
    steps:
    - uses: mktcode/consecutive-workflow-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
  
  BuildImage:
    runs-on: ubuntu-latest
    name: Build Base Image
    needs:
    - consecutiveness

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # with:
      #   fetch-depth: 2
    # - name: Check / set env Prod
    #   if: ${{ github.ref == 'refs/heads/main' }}
    #   run: |  
    #         echo "APP_ENV=PROD" >> $GITHUB_ENV

    - name: Check / set env Dev
      if: ${{ github.ref == 'refs/heads/develop' }}
      run: |
            echo "APP_ENV=DEV" >> $GITHUB_ENV
    # - name: Check for Changes
    #   run: |
    #         > diff
    #         git diff HEAD~1 HEAD backend/requirements.txt >> diff
    #         git diff HEAD~1 HEAD deploy/Dockerfile >> diff
    #         git diff HEAD~1 HEAD deploy/entrypoint.sh >> diff
    #         if [ -s diff ];then echo "DIFF=true" >> $GITHUB_ENV; else echo "DIFF=false" >> $GITHUB_ENV; fi
    #         echo ${{ env.DIFF }}
    
    # - name: Copy Docker Build
    #   # if: ${{ env.DIFF == 'true' }}
    #   run: |
    #         sshpass -p "${{ secrets.SSH_PAS }}" scp -r -o StrictHostKeyChecking=no ./backend/requirements.txt ./deploy/* ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}}:${{ secrets.BASE_DIR_APP }}build
    # - name: Build Image
    #   # if: ${{ env.DIFF == 'true' }}
    #   run: |
    #         sshpass -p "${{ secrets.SSH_PAS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}} << EOF
    #         ssh docker-agent <<-'EOF2'
    #             cd ${{ secrets.BASE_DIR_APP }}build/ \
    #             && sudo iptables -t mangle -F PREROUTING \
    #             && docker build . -t dj:latest \
    #             && sudo iptables-restore < /etc/iptables/rules.v4 \
    #             && docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_app_${{ env.APP_ENV }} down \
    #             && docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_app_${{ env.APP_ENV }} up -d
    #         EOF2
    #         EOF

    - uses: pmorelli92/github-container-registry-build-push@2.0.0
      name: Build and Publish latest service image
      with:
        github-push-secret: ${{secrets.GITHUB_TOKEN}}
        docker-image-name: dj
        # docker-image-tag: ${{ needs.version.outputs.vID }} # optional
        dockerfile-path: ./DockerfileBase # optional
        # build-context: ./backend/ # optional



  Deploy:
    runs-on: ubuntu-latest
    name: Rollout backend
    needs:
    - consecutiveness
    - BuildImage

    steps:
    - uses: actions/checkout@v3
    # - name: Check / set env Prod
    #   if: ${{ github.ref == 'refs/heads/main' }}
    #   run: |  
    #         echo "APP_ENV=PROD" >> $GITHUB_ENV

    - name: Check / set env Dev
      if: ${{ github.ref == 'refs/heads/develop' }}
      run: |
            echo "APP_ENV=DEV" >> $GITHUB_ENV
    
    # - name: Prepare Backend
    #   run: |
    #         sshpass -p "${{ secrets.SSH_PAS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}} << EOF
    #         mkdir -p ${{ secrets.BASE_DIR_APP }}${{ env.APP_ENV }}/swd
    #         EOF

    # - name: Copy Files
    #   run: |
    #         sshpass -p "${{ secrets.SSH_PAS }}" scp -r -o StrictHostKeyChecking=no ./backend/* ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}}:${{ secrets.BASE_DIR_APP }}${{ env.APP_ENV }}/swd

    # - name: Release Backend && Restart
    #   run: |
    #         sshpass -p "${{ secrets.SSH_PAS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}} <<-EOF
    #         ssh docker-agent <<-'EOF2'
    #           docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_app_${{ env.APP_ENV }} down
    #         EOF2
    #         cd ${{ secrets.BASE_DIR_APP }}${{ env.APP_ENV }} \
    #         && rm -rf bak || echo "bak not found" \
    #         && mv prd bak || echo "prd not found" \
    #         && mv swd prd || echo "swd not found" \
    #         && cd prd \
    #         && ln -s ../.env .env \
    #         && ssh docker-agent <<-'EOF3'
    #           docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_app_${{ env.APP_ENV }} up -d
    #         EOF3
    #         EOF
    - name: Copy Files
      run: |
            sshpass -p "${{ secrets.SSH_PAS }}" rsync -a --rsh="ssh -o StrictHostKeyChecking=no" ./backend/ ${{ secrets.SSH_USER }}@${{secrets.SSH_HOST}}:${{ secrets.BASE_DIR_APP }}${{ env.APP_ENV }}/${GITHUB_SHA}/
   
    - name: Release Backend
      run: |
            sshpass -p "${{ secrets.SSH_PAS }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            ssh docker-agent <<-'EOF2'
              docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_DEV_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_${{ env.APP_ENV }}_app down
            EOF2
            cd ${{ secrets.BASE_DIR_APP }}${{ env.DIR }} \
            && ln -sfn ${GITHUB_SHA} ./prd \
            && ln -s ../env ./prd/.env \
            && ssh docker-agent <<-'EOF2'
              docker-compose -f ${{ secrets.BASE_DIR_OPS }}compose/app_DEV_compose.yaml --env-file ${{ secrets.BASE_DIR_OPS }}config/.env_${{ env.APP_ENV }}_app up -d
            EOF2
            EOF